seurat_obj = lapply(X = 1:length(list_runs), function(x){
CreateSeuratObject(counts = Read10X(file.path(data_dir, list_runs[x])), project = list_runs[x])})
target_cells = stringr::str_split_fixed(colnames(seurat.combined.grm5), "_", 2)[,1]
seurat_obj.cut.grm5 = lapply(seurat_obj, function(x){
x[["grm5_pos_cluster"]] = colnames(x) %in% target_cells
x_cut = subset(x, subset = grm5_pos_cluster == TRUE)
x_cut <- NormalizeData(x_cut, verbose = FALSE)
x_cut <- FindVariableFeatures(x_cut, selection.method = "vst", nfeatures = 2000)
return(x_cut)
})
seurat.anchors <- FindIntegrationAnchors(object.list = seurat_obj.cut.grm5, dims = 1:25)
seurat.combined.grm5_v2 <- IntegrateData(anchorset = seurat.anchors, dims = 1:25)
DefaultAssay(seurat.combined.grm5_v2) <- "integrated"
# Run the standard workflow for visualization and clustering
seurat.combined.grm5_v2 <- ScaleData(seurat.combined.grm5_v2, verbose = FALSE)
seurat.combined.grm5_v2 <- RunPCA(seurat.combined.grm5_v2, npcs = 25, verbose = FALSE)
seurat.combined.grm5_v2 <- RunUMAP(seurat.combined.grm5_v2, reduction = "pca", dims = 1:25)
seurat.combined.grm5_v2 <- FindNeighbors(seurat.combined.grm5_v2, reduction = "pca", dims = 1:25)
seurat.combined.grm5_v2 <- FindClusters(seurat.combined.grm5_v2, resolution = 1)
# Find markers
DefaultAssay(seurat.combined.grm5_v2) <- "RNA"
seurat.combined.grm5_v2 <- ScaleData(seurat.combined.grm5_v2, verbose = FALSE)
seurat_markers_v2 <- FindAllMarkers(seurat.combined.grm5_v2, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
top10_v2 = seurat_markers_v2 %>%
group_by(cluster) %>%
top_n(n = 50, wt = avg_log2FC)
# Visualization
DimPlot(seurat.combined.grm5_v2, reduction = "umap", label = TRUE)
DimPlot(seurat.combined.grm5_v2, reduction = "umap", group.by = "orig.ident")
FeaturePlot(seurat.combined.grm5_v2, features = "Prdm12", min.cutoff = "q9")
FeaturePlot(seurat.combined.grm5_v2, features = "Phox2b", min.cutoff = "q9")
FeaturePlot(seurat.combined.grm5_v2, features = "Grm5", min.cutoff = "q9")
FeaturePlot(seurat.combined.grm5_v2, features = "Igf1", min.cutoff = "q9")
DoHeatmap(seurat.combined.grm5_v2, features = top10_v2$gene) + NoLegend()
top10_v2 = seurat_markers_v2 %>%
group_by(cluster) %>%
top_n(n = 5, wt = avg_log2FC)
DimPlot(seurat.combined.grm5_v2, reduction = "umap", label = TRUE)
DimPlot(seurat.combined.grm5_v2, reduction = "umap", group.by = "orig.ident")
FeaturePlot(seurat.combined.grm5_v2, features = "Prdm12", min.cutoff = "q9")
FeaturePlot(seurat.combined.grm5_v2, features = "Phox2b", min.cutoff = "q9")
FeaturePlot(seurat.combined.grm5_v2, features = "Grm5", min.cutoff = "q9")
FeaturePlot(seurat.combined.grm5_v2, features = "Igf1", min.cutoff = "q9")
DoHeatmap(seurat.combined.grm5_v2, features = top10_v2$gene) + NoLegend()
DoHeatmap(seurat.combined.grm5_v2, features = top10_v2$gene) + NoLegend()
p1 = DimPlot(seurat.combined.grm5_v2, reduction = "umap", group.by = "orig.ident")
p2 = FeaturePlot(seurat.combined.grm5_v2, features = "Grm5", min.cutoff = "q100")
plot_grid(p1, p2)
p1 = DimPlot(seurat.combined.grm5_v2, reduction = "umap", label = TRUE)
plot_grid(p1, p2)
knitr::opts_chunk$set(echo = TRUE)
# cells were already filtered out by the authors
data_dir = "~/Dropbox/Work_Korea/Collaborations/s.moon/scRNAseq/GSE192987/"
list_runs = list.files(data_dir)
raw_cnt = vector("list", length(list_runs))
seurat_obj = lapply(X = 1:length(list_runs), function(x){
CreateSeuratObject(counts = Read10X(file.path(data_dir, list_runs[x])), project = list_runs[x])})
library(dplyr)
library(Seurat)
library(patchwork)
library(dittoSeq)
# cells were already filtered out by the authors
data_dir = "~/Dropbox/Work_Korea/Collaborations/s.moon/scRNAseq/GSE192987/"
list_runs = list.files(data_dir)
raw_cnt = vector("list", length(list_runs))
seurat_obj = lapply(X = 1:length(list_runs), function(x){
CreateSeuratObject(counts = Read10X(file.path(data_dir, list_runs[x])), project = list_runs[x])})
seurat_obj = merge(seurat_obj[[1]], c(seurat_obj[[2]], seurat_obj[[3]], seurat_obj[[4]], seurat_obj[[5]], seurat_obj[[6]], seurat_obj[[7]], seurat_obj[[8]]))
#Add percent.mito metadata
seurat_obj[["percent.mito"]] <- PercentageFeatureSet(seurat_obj, pattern = "^mt-")
seurat_obj[["percent.ribo"]] <- PercentageFeatureSet(seurat_obj, pattern = "^Rps|^Rpl")
dittoScatterPlot(
seurat_obj,
x.var = "nCount_RNA",
y.var = "nFeature_RNA",
color.var = "percent.mito")
VlnPlot(seurat_obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mito"), ncol = 3)
# 500 < # of genes < 8000
# # of mitochondrial genes <10%
seurat_obj.cut <- subset(seurat_obj, subset = nFeature_RNA > 500)
seurat_obj.cut <- subset(seurat_obj.cut, subset = nFeature_RNA < 8000)
seurat_obj.cut <- subset(seurat_obj.cut, subset = percent.mito < 10)
dittoScatterPlot(
seurat_obj.cut,
x.var = "nCount_RNA",
y.var = "nFeature_RNA",
color.var = "percent.mito")
VlnPlot(seurat_obj.cut, features = c("nFeature_RNA", "nCount_RNA", "percent.mito"), ncol = 3)
table(seurat_obj.cut@meta.data$orig.ident)
# scRNA-seq controls: vagus051818 (# cells: 7842), vagus010419 (7580), vagusRC3 (7939), vagusRC4 (7821)
# projection-seq: vagus070519V1 (# cells: 6403), vagus070519V2 (6381), vagus071819V1 (5803), vagus071819V2 (6806)
seurat_obj.cut <- NormalizeData(seurat_obj.cut, verbose = FALSE)
seurat_obj.cut <- FindVariableFeatures(seurat_obj.cut, selection.method = "vst", nfeatures = 2000)
all.genes <- rownames(seurat_obj.cut)
seurat_obj.cut <- ScaleData(seurat_obj.cut, features = all.genes)
seurat_obj.cut <- RunPCA(seurat_obj.cut, npcs = 30, verbose = FALSE)
seurat_obj.cut = RunTSNE(seurat_obj.cut, reduction = "pca", dims = 1:30)
seurat_obj.cut = RunUMAP(seurat_obj.cut, reduction = "pca", dims = 1:30)
dittoDimPlot(seurat_obj.cut, "orig.ident", reduction.use = "umap")
seurat_obj.cut <- FindNeighbors(seurat_obj.cut, reduction = "pca", dims = 1:30, k.param = 42)
seurat_obj.cut <- FindClusters(seurat_obj.cut, resolution = 0.8)
dittoDimPlot(seurat_obj.cut, "RNA_snn_res.0.8", reduction.use = "umap")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(Seurat)
library(patchwork)
library(dittoSeq)
library(cowplot)
# cells were already filtered out by the authors
data_dir = "~/Dropbox/Work_Korea/Collaborations/s.moon/scRNAseq/GSE192987/"
list_runs = list.files(data_dir)
# only using projection-seq data
list_runs = c("vagus070519V1", "vagus070519V2", "vagus071819V1", "vagus071819V2")
seurat_obj = lapply(X = 1:length(list_runs), function(x){
CreateSeuratObject(counts = Read10X(file.path(data_dir, list_runs[x])), project = list_runs[x])})
seurat_obj = merge(seurat_obj[[1]], c(seurat_obj[[2]], seurat_obj[[3]], seurat_obj[[4]]))
seurat_obj[["percent.mito"]] <- PercentageFeatureSet(seurat_obj, pattern = "^mt-")
seurat_obj[["percent.ribo"]] <- PercentageFeatureSet(seurat_obj, pattern = "^Rps|^Rpl")
seurat_obj.cut <- subset(seurat_obj, subset = nFeature_RNA > 500)
seurat_obj.cut <- subset(seurat_obj.cut, subset = nFeature_RNA < 8000)
seurat_obj.cut <- subset(seurat_obj.cut, subset = percent.mito < 10)
# mito filtering
p1 = dittoScatterPlot(seurat_obj, x.var = "nCount_RNA", y.var = "nFeature_RNA", color.var = "percent.mito", min = 0, max = 30)
p2 = dittoScatterPlot(seurat_obj.cut, x.var = "nCount_RNA", y.var = "nFeature_RNA", color.var = "percent.mito", min = 0, max = 30)
plot_grid(p1, p2)
# features
VlnPlot(seurat_obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mito"), ncol = 3)
VlnPlot(seurat_obj.cut, features = c("nFeature_RNA", "nCount_RNA", "percent.mito"), ncol = 3,  group.by = "orig.ident")
# export values
seurat_cnt <- GetAssayData(object = seurat_obj.cut, slot = "counts")
seurat_norm <- GetAssayData(object = seurat_obj.cut, slot = "data", layer = "agus070519V1")
seurat_norm <- cbind(GetAssayData(object = seurat_obj.cut, slot = "data.vagus070519V1"),
GetAssayData(object = seurat_obj.cut, slot = "data.vagus070519V2"),
GetAssayData(object = seurat_obj.cut, slot = "data.vagus071819V1"),
GetAssayData(object = seurat_obj.cut, slot = "data.vagus071819V2"))
# export values
seurat_cnt <- GetAssayData(object = seurat_obj.cut, slot = "counts")
seurat_norm <- cbind(GetAssayData(object = seurat_obj.cut, slot = "data.vagus070519V1"),
GetAssayData(object = seurat_obj.cut, slot = "data.vagus070519V2"),
GetAssayData(object = seurat_obj.cut, slot = "data.vagus071819V1"),
GetAssayData(object = seurat_obj.cut, slot = "data.vagus071819V2"))
# export values
seurat_cnt <- GetAssayData(object = seurat_obj.cut, slot = "counts")
seurat_obj.cut
# Normalize data
seurat_obj.cut <- NormalizeData(seurat_obj.cut, verbose = FALSE)
seurat_obj.cut <- FindVariableFeatures(seurat_obj.cut, selection.method = "vst", nfeatures = 2000)
all.genes <- rownames(seurat_obj.cut)
seurat_obj.cut <- ScaleData(seurat_obj.cut, features = all.genes)
# export values
seurat_cnt <- GetAssayData(object = seurat_obj.cut, slot = "counts")
seurat_norm <- cbind(GetAssayData(object = seurat_obj.cut, slot = "data.vagus070519V1"),
GetAssayData(object = seurat_obj.cut, slot = "data.vagus070519V2"),
GetAssayData(object = seurat_obj.cut, slot = "data.vagus071819V1"),
GetAssayData(object = seurat_obj.cut, slot = "data.vagus071819V2"))
seurat_obj.cut
# export values
seurat_cnt <- GetAssayData(object = seurat_obj.cut, slot = "counts")
dim(seurat_cnt)
dim(seurat_obj)
dim(seurat_obj.cut)
seurat_norm <- GetAssayData(object = seurat_obj.cut, slot = "data")
dim(seurat_norm)
all.genes <- rownames(seurat_obj.cut)
subset_Data = seurat_norm[all.genes %in% c("QZ1", "QZ2", "QZ4", "QZ5" ,"QZ6", "QZ7", "QZ8"),]
subset_Data_exp = subset_Data>0.8
organ_lab = rep(NA, ncol(seurat_obj.cut))
organ_lab[subset_Data_exp[1,] == 1 & colSums(subset_Data_exp) == 1] = "Stomach"
organ_lab[subset_Data_exp[2,] == 1 & colSums(subset_Data_exp) == 1] = "Lung"
organ_lab[subset_Data_exp[3,] == 1 & colSums(subset_Data_exp) == 1] = "Colon"
organ_lab[subset_Data_exp[4,] == 1 & colSums(subset_Data_exp) == 1] = "Esophagus"
organ_lab[subset_Data_exp[5,] == 1 & colSums(subset_Data_exp) == 1] = "Duodenum"
organ_lab[subset_Data_exp[6,] == 1 & colSums(subset_Data_exp) == 1] = "Pancreas"
organ_lab[subset_Data_exp[7,] == 1 & colSums(subset_Data_exp) == 1] = "Heart"
seurat_obj.cut[["organ"]] = organ_lab
seurat_obj.cut <- RunPCA(seurat_obj.cut, npcs = 30, verbose = FALSE)
seurat_obj.cut = RunTSNE(seurat_obj.cut, reduction = "pca", dims = 1:30)
seurat_obj.cut = RunUMAP(seurat_obj.cut, reduction = "pca", dims = 1:30)
seurat_obj.cut <- FindNeighbors(seurat_obj.cut, reduction = "pca", dims = 1:30, k.param = 42)
seurat_obj.cut <- FindClusters(seurat_obj.cut, resolution = 0.8)
dittoDimPlot(seurat_obj.cut, "orig.ident", reduction.use = "umap", opacity = 0.5, size = 0.5)
dittoDimPlot(seurat_obj.cut, "RNA_snn_res.0.8", reduction.use = "umap")
DimPlot(seurat_obj.cut, reduction = "umap", split.by = "orig.ident")
FeaturePlot(seurat_obj.cut, features = "Slc17a6", min.cutoff = "q9")
FeaturePlot(seurat_obj.cut, features = "Phox2b", min.cutoff = "q9")
FeaturePlot(seurat_obj.cut, features = "Prdm12", min.cutoff = "q9")
FeaturePlot(seurat_obj.cut, features = "Grm5", min.cutoff = "q9")
FeaturePlot(seurat_obj.cut, features = "Igf1", min.cutoff = "q9")
dittoDimPlot(seurat_obj.cut, "organ", reduction.use = "umap", opacity = 1, size = 0.5)
p1 = dittoDimPlot(seurat_obj.cut, "orig.ident", reduction.use = "umap", opacity = 0.5, size = 0.5)
p2 = dittoDimPlot(seurat_obj.cut, "RNA_snn_res.0.8", reduction.use = "umap")
plot_grid(p1, p2)
DimPlot(seurat_obj.cut, reduction = "umap", split.by = "orig.ident")
FeaturePlot(seurat_obj.cut, features = "Slc17a6", min.cutoff = "q9")
p3 = FeaturePlot(seurat_obj.cut, features = "Slc17a6", min.cutoff = "q9")
p4 = FeaturePlot(seurat_obj.cut, features = "Phox2b", min.cutoff = "q9")
p5 = FeaturePlot(seurat_obj.cut, features = "Prdm12", min.cutoff = "q9")
plot_grid(p1, p2, p3, ncol = 3)
plot_grid(p3, p4, p5, ncol = 3)
p3 = FeaturePlot(seurat_obj.cut, features = "Slc17a6", min.cutoff = "q100")
p4 = FeaturePlot(seurat_obj.cut, features = "Phox2b", min.cutoff = "q100")
p5 = FeaturePlot(seurat_obj.cut, features = "Prdm12", min.cutoff = "q100")
plot_grid(p3, p4, p5, ncol = 3)
p6 = FeaturePlot(seurat_obj.cut, features = "Grm5", min.cutoff = "q9")
p6
plot_grid(p2, p4, p6)
p7 = dittoDimPlot(seurat_obj.cut, "organ", reduction.use = "umap", opacity = 1, size = 0.5)
plot_grid(p2, p4, p6, p7)
# enrichment of Grm-5 cells in different organs
fisher_enrich = vector("list", 7)
for(i in 1:7){
t_sub = rbind(as.numeric(seurat_norm[which(rownames(seurat_norm) == "Grm5"), ]>0), subset_Data_exp[i,])
a = sum(colSums(t_sub) == 2)
b = sum(t_sub[1,]) - a
c = sum(t_sub[2,]) - a
d = sum(colSums(t_sub) == 0)
t_out = fisher.test(matrix(c(a,b,c,d), 2,2), alternative = "greater")
fisher_enrich[[i]]$fisher = t_out
fisher_enrich[[i]]$table = matrix(c(a,b,c,d),2,2)
}
names(fisher_enrich) = c("Stomach", "Lung", "Colon", "Esophagus", "Deuodenum", "Pancreas", "Heart")
df = data.frame(odds_ratio = unlist(lapply(fisher_enrich, function(x){x$fisher$estimate})),
pvalue = unlist(lapply(fisher_enrich, function(x){x$fisher$p.value})),
label = unlist(lapply(strsplit(names(unlist(lapply(fisher_enrich, function(x){x$fisher$estimate}))), "[.]"), function(x){x[1]})))
p1 = ggplot(df, aes(x = label, y = odds_ratio)) + geom_bar(stat = "identity")
p2 = ggplot(df, aes(x = label, y = -log10(pvalue))) + geom_bar(stat = "identity")
p1+p2
# enrichment of Grm-5 cells in different clusters
fisher_enrich = vector("list", length(unique(seurat_obj.cut$seurat_clusters)))
for(i in 1:length(fisher_enrich)){
t_sub = rbind(as.numeric(seurat_norm[which(rownames(seurat_norm) == "Grm5"), ]>0),
as.numeric(seurat_obj.cut$seurat_clusters==(i-1)))
a = sum(colSums(t_sub) == 2)
b = sum(t_sub[1,]) - a
c = sum(t_sub[2,]) - a
d = sum(colSums(t_sub) == 0)
t_out = fisher.test(matrix(c(a,b,c,d), 2,2), alternative = "greater")
fisher_enrich[[i]]$fisher = t_out
fisher_enrich[[i]]$table = matrix(c(a,b,c,d),2,2)
}
names(fisher_enrich) = names(table(seurat_obj.cut$seurat_clusters))
df = data.frame(odds_ratio = unlist(lapply(fisher_enrich, function(x){x$fisher$estimate})),
pvalue = unlist(lapply(fisher_enrich, function(x){x$fisher$p.value})),
label = unlist(lapply(strsplit(names(unlist(lapply(fisher_enrich, function(x){x$fisher$estimate}))), "[.]"), function(x){x[1]}))) %>%
mutate(label = factor(label, levels = names(table(seurat_obj.cut$seurat_clusters))),
fdr = p.adjust(pvalue, "BH"))
p3 = ggplot(df, aes(x = label, y = odds_ratio)) + geom_bar(stat = "identity")
p4 = ggplot(df, aes(x = label, y = -log10(fdr))) + geom_bar(stat = "identity")
p3+p4
p1+p2
p3+p4
p1+p2 / p3+p4
(p1+p2) / (p3+p4)
p1 = dittoDimPlot(seurat_obj.cut, "orig.ident", reduction.use = "umap", opacity = 0.5, size = 0.5)
p2 = dittoDimPlot(seurat_obj.cut, "RNA_snn_res.0.8", reduction.use = "umap")
p3 = DimPlot(seurat_obj.cut, reduction = "umap", split.by = "orig.ident")
p4 = FeaturePlot(seurat_obj.cut, features = "Slc17a6", min.cutoff = "q100")
p5 = FeaturePlot(seurat_obj.cut, features = "Phox2b", min.cutoff = "q100")
p6 = FeaturePlot(seurat_obj.cut, features = "Prdm12", min.cutoff = "q100")
p7 = FeaturePlot(seurat_obj.cut, features = "Grm5", min.cutoff = "q9")
p8 = dittoDimPlot(seurat_obj.cut, "organ", reduction.use = "umap", opacity = 1, size = 0.5)
p1
p2
p3
p4
p5
p6
p7
p8
plot_grid(p1, p2)
p3
p7
plot_grid(p4, p5, p6, p7, p8)
p1 = FeaturePlot(seurat_obj.cut, features = "Grm5", min.cutoff = "q100")
p2 = FeaturePlot(seurat_obj.cut, features = "Igf1", min.cutoff = "q100")
p3 = FeaturePlot(seurat_obj.cut, features = "Pdk4", min.cutoff = "q100")
p4 = FeaturePlot(seurat_obj.cut, features = "Tgm2", min.cutoff = "q100")
p5 = FeaturePlot(seurat_obj.cut, features = "Calcrl", min.cutoff = "q100")
p6 = FeaturePlot(seurat_obj.cut, features = "Gpr26", min.cutoff = "q100")
plot_grid(p1, p2, p3, p4, p5, p6, ncol = 3)
plot_grid(p1, p2, p3, p4, p5, p6, ncol = 3)
knitr::opts_chunk$set(echo = TRUE)
files = list.files("~/Dropbox/Work_Korea/Collaborations/jh.cheong/RSEM_Gene/")
setwd("~/Dropbox/Work_Korea/Collaborations/jh.cheong/RSEM_Gene/")
files = list.files("~/Dropbox/Work_Korea/Collaborations/jh.cheong/RSEM_Gene/")
df = read.table("111N_rsem_genes_original_results", sep = "\t", stringsAsFactors = F, header = T)
head(df)
df2 = read.table("162T_rsem_genes_original_results", sep = "\t", stringsAsFactors = F, header = T)
head(df2)
all(df$gene_id == df2$gene_id)
TPM = sapply(files, function(x){
t_df = read.table(x, header = T, sep = "\t", stringsAsFactors = F)$TPM
})
head(t_df)
head(TPM)
class(TP)
class(TPM)
head(t_df)
head(df)
gene_info = read.table(files[1], sep = "\t", stringsAsFactors = F, header = T)[,1:4]
rownames(TPM) = gene_info$gene_id
head(df)
all(df$effective_length == df2$effective_length)
all(df$effective_length == df2$gene_id)
all(df$gene_id == df2$gene_id)
all(df$length == df2$length)
head(df$length == df2$length)
head(df$length)
df$length == df2$length
head(df)
head(df2)
all(df$transcript_id.s. == df2$transcript_id.s.)
df2 = read.table("14T_rsem_genes_original_results", header = T, sep = "")
df2 = read.table("14T_rsem_genes_original_results", header = T, sep = "\t", stringsAsFactors = F)
df2 = read.table("14T_rsem_genes_original_results", header = T, sep = "\t", stringsAsFactors = F)
head(df)
df2 =read.table("14T_rsem_genes_original_results", header = T, sep = "\t", stringsAsFactors = F)
df2 =read.table("14T_rsem_genes_original_results", header = T, sep = "\t", stringsAsFactors = F,quote = "")
head(TPM)
logTPM = log2(TPM+1)
head(logTPM)
hist(logTPM)
head(gene_info)
four_gene_classifier = c("ENSG00000100453" = "GZMB", "ENSG00000140105" = "WARS", "ENSG00000106483" = "SFRP4", "ENSG00000113722" = "CDX1")
gene_info$gene_id %in% names(four_gene_classifier)
logTPM[gene_info$gene_id %in% names(four_gene_classifier),]
logTPM[gene_info$gene_id %in% names(four_gene_classifier),]
library(ComplexHeatmap)
library(dplyr)
dim(df)
df = logTPM[gene_info$gene_id %in% names(four_gene_classifier),]
head(df)
match(rownames(df), four_gene_classifier)
match(rownames(df), names(four_gene_classifier))
four_gene_classifier[match(rownames(df), names(four_gene_classifier))]
rownames(df) = four_gene_classifier[match(rownames(df), names(four_gene_classifier))]
df
# sample information
samp_info = read.table("../clinical_info.txt", header = T, sep = "\t", stringsAsFactors = F)
head(samp_info)
colnames(logTPM)
grep("T", colnames(logTPM))
grepl("T", colnames(logTPM))
ht = data.frame(group = ifelse(grepl("T", colnames(logTPM)), "Tumor", "Normal")
ht = data.frame(group = ifelse(grepl("T", colnames(logTPM)), "Tumor", "Normal"))
ht = HeatmapAnnotation(df = data.frame(group = ifelse(grepl("T", colnames(logTPM)), "Tumor", "Normal")))
Heatmap(df, top_annotation = ht, column_labels = F)
Heatmap(df, top_annotation = ht, show_column_names = F)
mad_val = apply(df, 1, mad)
ind = order(mad_val, decreasing = T)[1:3000]
Heatmap(df[ind,], top_annotation = ht, show_column_names = F)
ind
mad_val = apply(df, 1, mad)
mad_val
mad_val = apply(log_TPM, 1, mad)
mad_val = apply(logTPM, 1, mad)
ind = order(mad_val, decreasing = T)[1:3000]
Heatmap(df[ind,], top_annotation = ht, show_column_names = F)
Heatmap(logTPM[ind,], top_annotation = ht, show_column_names = F)
head(samp_info)
colnames(logTPM)
stringr::str_split_fixed(colnames(logTPM), "_", 2)[,1]
samp_info
head(samp_info)
head(stringr::str_split_fixed(colnames(logTPM), "_", 2)[,1])
samp_info[, c("Normal", "Tumor")]
reshape(samp_info[, c("Normal", "Tumor")])
as.vector(samp_info[, c("Normal", "Tumor")])
as.character(samp_info[, c("Normal", "Tumor")])
unlist(samp_info[, c("Normal", "Tumor")])
as.matrix(samp_info[, c("Normal", "Tumor")])
as.character(as.matrix(samp_info[, c("Normal", "Tumor")]))
as.character(t(as.matrix(samp_info[, c("Normal", "Tumor")])))
ord_samp = as.character(t(as.matrix(samp_info[, c("Normal", "Tumor")])))
stringr::str_split_fixed(colnames(logTPM), "_", 2)[,1]
match(ord_samp, stringr::str_split_fixed(colnames(logTPM), "_", 2)[,1])
ord_samp = as.character(t(as.matrix(samp_info[, c("Normal", "Tumor")])))
TPM = TPM[, match(ord_samp, stringr::str_split_fixed(colnames(logTPM), "_", 2)[,1])]
logTPM = logTPM[, match(ord_samp, stringr::str_split_fixed(colnames(logTPM), "_", 2)[,1])]
colnames(TPM)
ord_samp = as.character(t(as.matrix(samp_info[, c("Normal", "Tumor")])))
t_la = stringr::str_split_fixed(colnames(logTPM), "_", 2)[,1]
TPM = TPM[, match(ord_samp, t_la)]
logTPM = logTPM[, t_la]
files = list.files("~/Dropbox/Work_Korea/Collaborations/jh.cheong/RSEM_Gene/")
TPM = sapply(files, function(x){
t_df = read.table(x, header = T, sep = "\t", stringsAsFactors = F)$TPM
})
gene_info = read.table(files[1], sep = "\t", stringsAsFactors = F, header = T)[,1:4]
rownames(TPM) = gene_info$gene_id
logTPM = log2(TPM+1)
ord_samp = as.character(t(as.matrix(samp_info[, c("Normal", "Tumor")])))
t_la = stringr::str_split_fixed(colnames(logTPM), "_", 2)[,1]
TPM = TPM[, match(ord_samp, t_la)]
logTPM = logTPM[, match(ord_samp, t_la)]
colnames(TPM) = t_la
colnames(TPM) = t_la
colnames(TPM)
setwd("~/Dropbox/Work_Korea/Collaborations/jh.cheong/RSEM_Gene/")
files = list.files("~/Dropbox/Work_Korea/Collaborations/jh.cheong/RSEM_Gene/")
TPM = sapply(files, function(x){
t_df = read.table(x, header = T, sep = "\t", stringsAsFactors = F)$TPM
})
gene_info = read.table(files[1], sep = "\t", stringsAsFactors = F, header = T)[,1:4]
rownames(TPM) = gene_info$gene_id
logTPM = log2(TPM+1)
# sample information
samp_info = read.table("../clinical_info.txt", header = T, sep = "\t", stringsAsFactors = F)
# reordering TPM matrix according to samp_info matrix
ord_samp = as.character(t(as.matrix(samp_info[, c("Normal", "Tumor")])))
t_la = stringr::str_split_fixed(colnames(logTPM), "_", 2)[,1]
TPM = TPM[, match(ord_samp, t_la)]
logTPM = logTPM[, match(ord_samp, t_la)]
colnames(TPM) = ord_samp
colnames(logTPM) = ord_samp
seq.int(2, ncol(logTPM), 2)
seq.int(1, ncol(logTPM), 2)
# fold-changes between tumor vs matched normal
logFC = logTPM[, seq.int(2, ncol(logTPM), 2)] - logTPM[, seq.int(1, ncol(logTPM), 2)]
hist(logFC, 100)
df_fc = logFC[gene_info$gene_id %in% names(four_gene_classifier),]
rownames(df_fc) = four_gene_classifier[match(rownames(df_fc), names(four_gene_classifier))]
head(df_fc)
head(samp_info)
ht = HeatmapAnnotation(df = samp_info[, c("Histology..Lauren.", "MSI", "EBV", "Final.subtype", "mRNA_sub", "Global.proteome.subtype", "Phospho_sub", "Glyco_sub", "CC_sub")])
Heatmap(df_fc, top_annotation = ht, show_column_names = F)
head(samp_info[, c("Histology..Lauren.", "MSI", "EBV", "Final.subtype", "mRNA_sub", "Global.proteome.subtype", "Phospho_sub", "Glyco_sub", "CC_sub")])
samp_info$MSI
samp_info$mRNA_sub
# sample information
samp_info = read.table("../clinical_info.txt", header = T, sep = "\t", stringsAsFactors = T)
ht = HeatmapAnnotation(df = samp_info[, c("Histology..Lauren.", "MSI", "EBV", "Final.subtype", "mRNA_sub", "Global.proteome.subtype", "Phospho_sub", "Glyco_sub", "CC_sub")] %>%)
ht = HeatmapAnnotation(df = samp_info[, c("Histology..Lauren.", "MSI", "EBV", "Final.subtype", "mRNA_sub", "Global.proteome.subtype", "Phospho_sub", "Glyco_sub", "CC_sub")])
Heatmap(df_fc, top_annotation = ht, show_column_names = F)
Heatmap(df_fc, top_annotation = ht, show_column_names = F)
# sample information
samp_info = read.table("../clinical_info.txt", header = T, sep = "\t", stringsAsFactors = T) %>%
mutate(Final.subtype = factor(Final.subtype),
mRNA_sub = factor(mRNA_sub),
Global.proteome.subtype = factor(Global.proteome.subtype),
Phospho_sub = factor(Phospho_sub),
Glyco_sub = factor(Glyco_sub),
CC_sub = factor(CC_sub))
ht = HeatmapAnnotation(df = samp_info[, c("Histology..Lauren.", "MSI", "EBV", "Final.subtype", "mRNA_sub", "Global.proteome.subtype", "Phospho_sub", "Glyco_sub", "CC_sub")])
Heatmap(df_fc, top_annotation = ht, show_column_names = F)
df_fc
scale(df_fc)
rowMeans(scale(df_fc))
rowMeans(t(scale(t(df_fc))))
Heatmap(t(scale(t(df_fc))), top_annotation = ht, show_column_names = F)
Heatmap(t(scale(t(df_fc))), top_annotation = ht, show_column_names = F)
Heatmap(t(scale(t(df_fc))), top_annotation = ht, show_column_names = F, clustering_distance_rows = "pearson")
Heatmap(t(scale(t(df_fc))), top_annotation = ht, show_column_names = F, clustering_distance_rows = "pearson")
Heatmap(t(scale(t(df_fc))), top_annotation = ht, show_column_names = F, clustering_distance_columns =  = "pearson")
Heatmap(t(scale(t(df_fc))), top_annotation = ht, show_column_names = F, clustering_distance_columns = "pearson")
df_fc = logFC[gene_info$gene_id %in% names(four_gene_classifier),]
rownames(df_fc) = four_gene_classifier[match(rownames(df_fc), names(four_gene_classifier))]
ht = HeatmapAnnotation(df = samp_info[, c("Histology..Lauren.", "MSI", "EBV", "Final.subtype", "mRNA_sub", "Global.proteome.subtype", "Phospho_sub", "Glyco_sub", "CC_sub")])
Heatmap(t(scale(t(df_fc))), top_annotation = ht, show_column_names = F)
df_fc = logFC[gene_info$gene_id %in% names(four_gene_classifier),]
rownames(df_fc) = four_gene_classifier[match(rownames(df_fc), names(four_gene_classifier))]
ht = HeatmapAnnotation(df = samp_info[, c("Histology..Lauren.", "MSI", "EBV", "Final.subtype", "mRNA_sub", "Global.proteome.subtype", "Phospho_sub", "Glyco_sub", "CC_sub")])
Heatmap(t(scale(t(df_fc))), top_annotation = ht, show_column_names = F)
Heatmap(t(scale(t(df_fc))), top_annotation = ht, show_column_names = F)
Heatmap(t(scale(t(df_fc))), top_annotation = ht, show_column_names = F, clustering_distance_rows = "pearson")
Heatmap(t(scale(t(df_fc))), top_annotation = ht, show_column_names = F, clustering_distance_columns = "pearson")
ht = HeatmapAnnotation(df = samp_info[, c("Histology..Lauren.", "MSI", "EBV", "Final.subtype", "mRNA_sub", "Global.proteome.subtype", "Phospho_sub", "Glyco_sub", "CC_sub")])
Heatmap(t(scale(t(df_fc))), top_annotation = ht, show_column_names = F, clustering_distance_columns = "pearson")
set.seed(124)
ht = HeatmapAnnotation(df = samp_info[, c("Histology..Lauren.", "MSI", "EBV", "Final.subtype", "mRNA_sub", "Global.proteome.subtype", "Phospho_sub", "Glyco_sub", "CC_sub")])
Heatmap(t(scale(t(df_fc))), top_annotation = ht, show_column_names = F, clustering_distance_columns = "pearson")
ht = HeatmapAnnotation(df = samp_info[, c("Histology..Lauren.", "MSI", "EBV", "Final.subtype", "mRNA_sub", "Global.proteome.subtype", "Phospho_sub", "Glyco_sub", "CC_sub")])
Heatmap(t(scale(t(df_fc))), top_annotation = ht, show_column_names = F, clustering_distance_columns = "pearson")
ht = HeatmapAnnotation(df = samp_info[, c("Histology..Lauren.", "MSI", "EBV", "Final.subtype", "mRNA_sub", "Global.proteome.subtype", "Phospho_sub", "Glyco_sub", "CC_sub")])
Heatmap(t(scale(t(df_fc))), top_annotation = ht, show_column_names = F, clustering_distance_columns = "pearson")
set.seed(90)
ht = HeatmapAnnotation(df = samp_info[, c("Histology..Lauren.", "MSI", "EBV", "Final.subtype", "mRNA_sub", "Global.proteome.subtype", "Phospho_sub", "Glyco_sub", "CC_sub")])
Heatmap(t(scale(t(df_fc))), top_annotation = ht, show_column_names = F, clustering_distance_columns = "pearson")
set.seed(100)
ht = HeatmapAnnotation(df = samp_info[, c("Histology..Lauren.", "MSI", "EBV", "Final.subtype", "mRNA_sub", "Global.proteome.subtype", "Phospho_sub", "Glyco_sub", "CC_sub")])
Heatmap(t(scale(t(df_fc))), top_annotation = ht, show_column_names = F, clustering_distance_columns = "pearson")
set.seed(200)
ht = HeatmapAnnotation(df = samp_info[, c("Histology..Lauren.", "MSI", "EBV", "Final.subtype", "mRNA_sub", "Global.proteome.subtype", "Phospho_sub", "Glyco_sub", "CC_sub")])
Heatmap(t(scale(t(df_fc))), top_annotation = ht, show_column_names = F, clustering_distance_columns = "pearson")
df_tumor = logTPM[gene_info$gene_id %in% names(four_gene_classifier), seq.int(2, ncol(logTPM), 2)]
head(df_tumor)
df_tumor = logTPM[gene_info$gene_id %in% names(four_gene_classifier), seq.int(2, ncol(logTPM), 2)]
rownames(df_tumor) = four_gene_classifier[match(rownames(df_tumor), names(four_gene_classifier))]
set.seed(200)
ht = HeatmapAnnotation(df = samp_info[, c("Histology..Lauren.", "MSI", "EBV", "Final.subtype", "mRNA_sub", "Global.proteome.subtype", "Phospho_sub", "Glyco_sub", "CC_sub")])
Heatmap(t(scale(t(df_tumor))), top_annotation = ht, show_column_names = F, clustering_distance_columns = "pearson")
seq.int(2, ncol(logTPM), 2)
df_tumor = logTPM[gene_info$gene_id %in% names(four_gene_classifier), seq.int(1, ncol(logTPM), 2)]
rownames(df_tumor) = four_gene_classifier[match(rownames(df_tumor), names(four_gene_classifier))]
set.seed(200)
ht = HeatmapAnnotation(df = samp_info[, c("Histology..Lauren.", "MSI", "EBV", "Final.subtype", "mRNA_sub", "Global.proteome.subtype", "Phospho_sub", "Glyco_sub", "CC_sub")])
Heatmap(t(scale(t(df_tumor))), top_annotation = ht, show_column_names = F, clustering_distance_columns = "pearson")
four_gene_classifier = c("ENSG00000100453" = "GZMB", "ENSG00000140105" = "WARS", "ENSG00000106483" = "SFRP4", "ENSG00000113722" = "CDX1")
df = logTPM[gene_info$gene_id %in% names(four_gene_classifier),]
rownames(df) = four_gene_classifier[match(rownames(df), names(four_gene_classifier))]
ht = HeatmapAnnotation(df = data.frame(group = ifelse(grepl("T", colnames(logTPM)), "Tumor", "Normal")))
Heatmap(df, top_annotation = ht, show_column_names = F)
four_gene_classifier = c("ENSG00000100453" = "GZMB", "ENSG00000140105" = "WARS", "ENSG00000106483" = "SFRP4", "ENSG00000113722" = "CDX1")
df = logTPM[gene_info$gene_id %in% names(four_gene_classifier),]
rownames(df) = four_gene_classifier[match(rownames(df), names(four_gene_classifier))]
ht = HeatmapAnnotation(df = data.frame(group = ifelse(grepl("T", colnames(logTPM)), "Tumor", "Normal")))
Heatmap(t(scale(t(df))), top_annotation = ht, show_column_names = F)
four_gene_classifier = c("ENSG00000100453" = "GZMB", "ENSG00000140105" = "WARS", "ENSG00000106483" = "SFRP4", "ENSG00000113722" = "CDX1")
df = logTPM[gene_info$gene_id %in% names(four_gene_classifier),]
rownames(df) = four_gene_classifier[match(rownames(df), names(four_gene_classifier))]
ht = HeatmapAnnotation(df = data.frame(group = ifelse(grepl("T", colnames(logTPM)), "Tumor", "Normal")))
Heatmap(t(scale(t(df))), top_annotation = ht, show_column_names = F)
